#!/usr/bin/env bash

commit(){
  # git rev-parse --short HEAD
  git rev-parse HEAD
}

branch(){
  git symbolic-ref -q --short HEAD
}

state(){
  [[ -n $(git status --porcelain) ]] && echo dirty || echo clean
}

summary(){
  git describe --tags --dirty --always
}

# date in rfc3339 format
# https://unix.stackexchange.com/questions/120484/what-is-a-standard-command-for-printing-a-date-in-rfc-3339-format
# equivalent go code:
# https://github.com/ahmetb/govvv/blob/master/values.go#L62
builddate(){
  date -u +"%Y-%m-%dT%H:%M:%SZ"
}

version(){
# basedir=$(dirname $(realpath $0))
# cd $basedir/../..
  git describe --always --abbrev=0 --tags
}

ldflags(){
  ldflags=""
  ldflags+="-X 'k0s.io/conntroll/pkg/version.GitCommitString=$(commit)'
"
  ldflags+="-X 'k0s.io/conntroll/pkg/version.GitStateString=$(state)'
"
  ldflags+="-X 'k0s.io/conntroll/pkg/version.GitBranchString=$(branch)'
"
  ldflags+="-X 'k0s.io/conntroll/pkg/version.GitSummaryString=$(summary)'
"
  ldflags+="-X 'k0s.io/conntroll/pkg/version.BuildDateString=$(builddate)'
"
  ldflags+="-X 'k0s.io/conntroll/pkg/version.VersionString=$(version)'
"
  echo -n "$ldflags"
}

json(){
  printf '{
  "GitCommit": "%s",
  "GitState": "%s",
  "GitBranch": "%s",
  "GitSummary": "%s",
  "BuildDate": "%s",
  "Version": "%s"
}\n' "$(commit)" "$(state)" "$(branch)" "$(summary)" "$(builddate)" "$(version)"
}

#ldflags
json | tee /dev/stderr | cat > version
